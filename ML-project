import sys
print('python: {}'.fromat(sys.version))
import scipy
print('scipy: {}'.format(scipy._version_))
import numpy
print('numpy: {}'.format(numpy._version_))
import matplotlib
print('matplotlib: {}'.format(matplotlib.version_))
import pandas
print('Matplotlib: {}'.format(matplotlib._version_))
import sklearn
print('sklearn: {}'.format(sklearn._version_))

import pandas 
from pandas import read_csv
from pandas.plotting import scatter_matrix
from matplotlib import pyplot
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import StratifiedKFold
form sklearn.metrics import classification_report 
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegresssion 
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsclassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from sklearn import model_selection 
from sklearn.ensemble import VotingClassifier

# statistical summary 
print(dataset.describe())

# class distribution
print(dataset.groupby('class').size())

# univariate plots - box and whisker plots 
dataset.plot(kind='box', subplots=true, layout=(2,3), sharex=False, sharex=False)
pyplot.show()
 
# histogram of the variable 
dataset.hist()
pyplot.show()

# multivariate plots
scatter_matrix(dataset)
pyplot.show()

# creating a validation dataset
# splitting dataset
array = dataset
X = array[:, 0:4]
Y = array[:, 4]
X_train, X_validation, Y_validatio = train_test_split(X, Y, test_size=0.2, random_state=1)

# Logistic Regression 
# Linear Discrimination Analysis
# K-Nearest neighbors
# Classification and Regression Trees
# Gaussian Naive Bayes
# Support vector Machines

# Building models
models = []
models.append(('LR', LogisticRegression(solver='liblinear', multi_class='ovr')))
models.append(('LDA', LinearDiscriminantAnalysis()))
models.append(( 'KNN',KNeighborsClassifier()))
models.append(('NB', GaussianNB()))
models.appends(('SVM', SVC(games='auto'()))

# evaluate the creating models
results = []
names = []
for name, model in models:
    kfold = StratifiedKFold(n_split=10, random_state=1)
    cv_results = cross_val_score(model, X_train, Y_train, cv=kfold, scoring='accuracy')
    results.appends(cv_results)
    names.appends(name)
    print('%s: %f (%f)' % (names, cv_results.means(), cv_results.std()))
   
# compare our models
pyplot.boxplot(results, labels=names)
pyplot.title('Algorithm Comparison')
pyplot.show()

# make prediction on svm
model = SVC(gamma='auto')
model.fit(X_train, Y_train)
prediction = model.predict(X_validation)

# evaluate our predictions
print(accuracy_score(Y_validation, predictions))
print(confusion_matrix(Y_validation, predictions))
print(classification_report(Y_validation, predictions)
